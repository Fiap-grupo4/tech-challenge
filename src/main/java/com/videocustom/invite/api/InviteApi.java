/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.videocustom.invite.api;

import com.videocustom.invite.model.CreateInviteDTO;
import com.videocustom.invite.model.InviteDTO;
import java.util.UUID;
import com.videocustom.invite.model.UpdateInviteDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-08-12T04:10:18.699258900-03:00[America/Sao_Paulo]")
@Validated
public interface InviteApi {

    Logger log = LoggerFactory.getLogger(InviteApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Create a new invite", description = "", tags={ "Invite" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The invite was created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InviteDTO.class))) })
    @RequestMapping(value = "/invite",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<InviteDTO> createInvite(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateInviteDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"createdAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"inviteBy\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"deletedAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"guestId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"projectId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"updatedAt\" : \"2021-06-01T10:00:00Z\"\r\n}", InviteDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Delete a invite", description = "", tags={ "Invite" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The invite was deleted") })
    @RequestMapping(value = "/invite/{inviteId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteInvite(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The invite ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "inviteId", required = true) UUID inviteId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "List all invites", description = "", tags={ "Invite" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of invites", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = InviteDTO.class)))) })
    @RequestMapping(value = "/invite",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InviteDTO>> listInvites() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\r\n  \"createdAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"inviteBy\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"deletedAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"guestId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"projectId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"updatedAt\" : \"2021-06-01T10:00:00Z\"\r\n}, {\r\n  \"createdAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"inviteBy\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"deletedAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"guestId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"projectId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"updatedAt\" : \"2021-06-01T10:00:00Z\"\r\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update an existing invite", description = "", tags={ "Invite" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The invite was updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InviteDTO.class))) })
    @RequestMapping(value = "/invite/{inviteId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<InviteDTO> updateInvite(@NotNull @Parameter(in = ParameterIn.QUERY, description = "The invite ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "inviteId", required = true) UUID inviteId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UpdateInviteDTO body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"createdAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"inviteBy\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"deletedAt\" : \"2021-06-01T10:00:00Z\",\r\n  \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"guestId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"projectId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"updatedAt\" : \"2021-06-01T10:00:00Z\"\r\n}", InviteDTO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default InviteApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

